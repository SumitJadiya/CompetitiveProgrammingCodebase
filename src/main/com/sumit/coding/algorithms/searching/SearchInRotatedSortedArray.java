package main.com.sumit.coding.algorithms.searching;

import org.jetbrains.annotations.NotNull;

import static java.util.Arrays.binarySearch;

/*
 * Search in Rotated Sorted Array
 * Problem URL : https://leetcode.com/problems/search-in-rotated-sorted-array/
 *
 * Input: nums = [4,5,6,7,0,1,2], target = 0
 * Output: 4
 * */
public class SearchInRotatedSortedArray {
    public static void main(String[] args) {
        int[] nums = {4, 5, 6, 7, 0, 1, 2};
        int target = 0;
        System.out.println(search(nums, target));

        nums = new int[]{8606,8656,8694,8830,8835,8876,8895,8945,8947,8985,8988,9029,9043,9070,9080,9091,9108,9118,9163,9182,9190,9194,9197,9202,9250,9331,9370,9379,9389,9410,9430,9433,9460,9469,9474,9513,9515,9591,9639,9643,9647,9691,9700,9706,9715,9730,9781,9783,9841,9847,9857,9861,9885,9894,9972,10000,-9952,-9934,-9888,-9868,-9867,-9788,-9748,-9737,-9698,-9681,-9614,-9604,-9559,-9533,-9493,-9474,-9372,-9340,-9315,-9310,-9273,-9209,-9180,-9155,-9118,-9112,-9108,-9107,-9074,-9016,-8985,-8971,-8961,-8952,-8951,-8943,-8887,-8880,-8837,-8815,-8789,-8771,-8768,-8651,-8594,-8553,-8483,-8440,-8436,-8425,-8362,-8341,-8281,-8276,-8256,-8238,-8148,-8142,-8066,-7966,-7945,-7941,-7936,-7931,-7878,-7860,-7854,-7837,-7833,-7798,-7752,-7734,-7718,-7681,-7647,-7576,-7567,-7555,-7544,-7521,-7509,-7489,-7423,-7411,-7348,-7347,-7334,-7235,-7232,-7208,-7141,-7140,-7136,-7123,-7079,-7068,-7003,-7001,-6998,-6991,-6879,-6854,-6847,-6806,-6797,-6750,-6684,-6679,-6657,-6585,-6517,-6503,-6498,-6469,-6399,-6385,-6364,-6297,-6292,-6279,-6203,-6153,-6150,-6146,-6138,-6115,-6110,-6099,-6038,-5840,-5793,-5775,-5726,-5655,-5608,-5604,-5561,-5513,-5458,-5437,-5387,-5375,-5360,-5338,-5328,-5312,-5262,-5251,-5237,-5227,-5210,-5197,-5186,-5142,-5125,-5120,-5073,-5070,-5023,-5017,-5014,-4982,-4973,-4957,-4867,-4865,-4864,-4793,-4701,-4698,-4612,-4595,-4583,-4505,-4487,-4444,-4416,-4384,-4381,-4350,-4346,-4301,-4260,-4204,-4182,-4157,-4065,-4020,-3939,-3935,-3908,-3892,-3827,-3793,-3790,-3787,-3773,-3741,-3707,-3690,-3581,-3546,-3521,-3464,-3419,-3409,-3376,-3350,-3335,-3313,-3221,-3207,-3206,-3128,-3122,-3111,-3100,-3061,-2974,-2968,-2894,-2867,-2866,-2862,-2826,-2813,-2634,-2591,-2546,-2439,-2423,-2413,-2343,-2309,-2290,-2241,-2214,-2213,-2208,-2179,-2132,-2129,-2090,-2088,-2059,-2047,-1979,-1951,-1946,-1945,-1884,-1871,-1865,-1764,-1700,-1699,-1669,-1663,-1650,-1633,-1579,-1537,-1528,-1520,-1506,-1446,-1441,-1376,-1357,-1329,-1326,-1310,-1294,-1291,-1252,-1242,-1240,-1224,-1181,-1170,-1141,-1042,-1037,-1031,-1018,-1010,-919,-904,-791,-768,-664,-626,-575,-518,-499,-486,-476,-463,-452,-412,-396,-359,-319,-303,-300,-279,-210,-196,-192,-148,-113,-99,-96,-92,-77,-55,-16,22,51,83,126,203,229,233,248,265,275,290,300,301,302,310,322,348,351,402,407,408,413,466,467,476,507,522,523,604,619,673,676,694,703,713,813,836,857,925,935,950,964,970,990,995,1011,1028,1058,1142,1145,1151,1220,1227,1348,1374,1477,1488,1495,1499,1512,1531,1613,1678,1731,1740,1862,1871,1901,1927,1937,1959,1966,2045,2047,2069,2092,2101,2195,2208,2234,2241,2267,2270,2321,2353,2357,2426,2444,2449,2461,2472,2499,2539,2626,2627,2649,2684,2685,2720,2740,2813,2815,2819,2868,2888,2898,2984,3028,3031,3044,3076,3082,3181,3207,3270,3272,3278,3282,3355,3367,3396,3400,3494,3513,3569,3606,3624,3629,3678,3685,3713,3758,3765,3775,3805,3827,3833,3870,3879,3939,3940,3943,3944,3948,3950,3953,3956,3961,3994,4018,4041,4042,4078,4093,4097,4098,4103,4113,4125,4129,4213,4216,4246,4283,4310,4322,4337,4362,4393,4447,4482,4531,4536,4548,4550,4611,4614,4647,4697,4726,4780,4797,4809,4811,4839,4841,4879,4881,4883,4940,5077,5090,5100,5150,5160,5236,5258,5282,5287,5336,5435,5473,5529,5536,5586,5612,5670,5724,5735,5809,5813,5831,5849,5891,5899,5928,5963,5987,6017,6028,6043,6047,6050,6051,6156,6167,6192,6206,6224,6254,6272,6310,6338,6347,6386,6438,6452,6470,6597,6603,6673,6688,6704,6747,6777,6812,6827,6836,6852,6873,6928,6947,6962,7025,7074,7119,7170,7188,7293,7325,7350,7355,7372,7389,7400,7467,7508,7513,7533,7564,7566,7567,7583,7606,7607,7649,7666,7696,7719,7721,7735,7737,7774,7803,7819,7820,7838,7854,7869,7891,7911,7928,7946,7995,8020,8024,8031,8055,8110,8154,8190,8223,8240,8257,8276,8391,8470,8548,8577};
        target = -10000;
        System.out.println(search(nums, target));
    }

    private static int findPivotIndexOfRotatedArray(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        int mid = start + (end - start) / 2;

        while (start < end) {
            if (nums[mid] >= nums[0]) start = mid + 1;
            else end = mid;

            mid = start + (end - start) / 2;
        }
        return start;
    }

    private static int search(int @NotNull [] nums, int target) {
        int start = 0;
        int end = nums.length - 1;

        if (nums.length == 1)
            return nums[start] == target ? start : -1;

        int pivotIdx = findPivotIndexOfRotatedArray(nums);

        if (nums[pivotIdx] <= target && target <= nums[end])
            start = pivotIdx;
        else end = pivotIdx - 1;

        return binarySearch(nums, start, end, target);
    }
}
